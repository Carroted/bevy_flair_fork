name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Run cargo clippy --workspace --all-targets -- -D warnings
  check:
    strategy:
      matrix:
        include:
          - name: Linux x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - name: Wasm
            os: ubuntu-latest
            target: wasm32-unknown-unknown

          - name: MacOS aarch64
            os: macos-14
            target: aarch64-apple-darwin

    name: Clippy ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-clippy-${{ hashFiles('**/Cargo.toml') }}
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: ${{ matrix.target }}
      - name: Install ubuntu deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get install -y libudev-dev
      - name: Run cargo check
        run: cargo check --workspace --target ${{ matrix.target }}
      - name: Run clippy
        run: cargo clippy --workspace --target ${{ matrix.target }} --all-targets  -- -D warnings

  # Run cargo fmt --all -- --check
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Run cargo fmt
        run: cargo fmt --all -- --check

  # Run cargo doc --workspace --no-deps --examples --all-features --document-private-items
  doc-check:
    name: Doc check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install ubuntu deps
        run: sudo apt-get install -y libudev-dev
      - name: Run cargo doc
        run: cargo doc --workspace --no-deps --examples --all-features --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Run cargo test --workspace
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.toml') }}
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install ubuntu deps
        run: sudo apt-get install -y libudev-dev
      - name: Run cargo test
        run: cargo test --workspace
  # Run cargo check --all-targets using MSRV
  msrv:
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-msrv-${{ hashFiles('**/Cargo.toml') }}
      - uses: dtolnay/rust-toolchain@stable
      - name: get MSRV
        id: msrv
        run: |
          msrv=`cargo metadata --no-deps --format-version 1 | jq --raw-output '.packages[] | select(.name=="bevy_flair") | .rust_version'`
          echo "msrv=$msrv" >> $GITHUB_OUTPUT
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}
      - name: Install ubuntu deps
        run: sudo apt-get install -y libudev-dev
      - name: Run cargo check
        id: check
        run: cargo check --all-targets
